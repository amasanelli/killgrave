import{_ as o,r as p,o as u,c as r,a as s,b as n,d as e,e as t}from"./app-GKjJbFgT.js";const i={},l=s("h1",{id:"use-regular-expressions-regex",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#use-regular-expressions-regex","aria-hidden":"true"},"#"),n(" Use regular expressions (regex)")],-1),c=s("h2",{id:"regex-in-the-endpoint",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#regex-in-the-endpoint","aria-hidden":"true"},"#"),n(" Regex in the endpoint")],-1),d={href:"https://github.com/gorilla/mux",target:"_blank",rel:"noopener noreferrer"},q={href:"https://cran.r-project.org/web/packages/ulid/vignettes/intro-to-ulid.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;endpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/gophers/{_id:[\\\\w]{26}}&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{\\&quot;data\\&quot;:{\\&quot;type\\&quot;:\\&quot;gophers\\&quot;,\\&quot;id\\&quot;:\\&quot;01D8EMQ185CA8PRGE20DKZTGSR\\&quot;,\\&quot;attributes\\&quot;:{\\&quot;name\\&quot;:\\&quot;Zebediah\\&quot;,\\&quot;color\\&quot;:\\&quot;Purples\\&quot;,\\&quot;age\\&quot;:55}}}&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regex-in-the-query-parameters" tabindex="-1"><a class="header-anchor" href="#regex-in-the-query-parameters" aria-hidden="true">#</a> Regex in the query parameters</h2>`,2),v={href:"https://github.com/gorilla/mux",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>In this example, we have configured an imposter that only matches if we receive an apiKey as query parameter:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;endpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/gophers/{_id:[\\\\w]{26}}&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;apiKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{_apiKey:[\\\\w]+}&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{\\&quot;data\\&quot;:{\\&quot;type\\&quot;:\\&quot;gophers\\&quot;,\\&quot;id\\&quot;:\\&quot;01D8EMQ185CA8PRGE20DKZTGSR\\&quot;,\\&quot;attributes\\&quot;:{\\&quot;name\\&quot;:\\&quot;Zebediah\\&quot;,\\&quot;color\\&quot;:\\&quot;Purples\\&quot;,\\&quot;age\\&quot;:55}}}&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regex-in-the-headers" tabindex="-1"><a class="header-anchor" href="#regex-in-the-headers" aria-hidden="true">#</a> Regex in the headers:</h2><p>In this case we will not need the <code>gorilla mux nomenclature</code> to write our regex.</p><p>In the next example, we have configured an imposter that uses regex to match an <code>Authorization</code> header.</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;endpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/gophers/{id:[\\\\w]{26}}&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Authorization&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\\\w+&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;response&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
      <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">&quot;body&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{\\&quot;data\\&quot;:{\\&quot;type\\&quot;:\\&quot;gophers\\&quot;,\\&quot;id\\&quot;:\\&quot;01D8EMQ185CA8PRGE20DKZTGSR\\&quot;,\\&quot;attributes\\&quot;:{\\&quot;name\\&quot;:\\&quot;Zebediah\\&quot;,\\&quot;color\\&quot;:\\&quot;Purples\\&quot;,\\&quot;age\\&quot;:55}}}&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function h(b,g){const a=p("ExternalLinkIcon");return u(),r("div",null,[l,c,s("p",null,[n("Killgrave uses the "),s("a",d,[n("gorilla/mux"),e(a)]),n(" regular expression format for endpoint matching.")]),s("p",null,[n("In the next example, we have configured an endpoint to match with any kind of "),s("a",q,[n("ULID ID"),e(a)]),n(":")]),k,s("p",null,[n("Killgrave uses the "),s("a",v,[n("gorilla/mux"),e(a)]),n(" regular expression format for query parameter matching.")]),m])}const x=o(i,[["render",h],["__file","ht-regex.html.vue"]]);export{x as default};
