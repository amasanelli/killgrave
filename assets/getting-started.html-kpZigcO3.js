import{_ as i,r,o as l,c as s,a as o,b as e,d as a,e as t}from"./app-lnPknyyT.js";const c={},d=t(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting started</h1><p>To start Killgrave, you can simply do it by running:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ killgrave
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),h={href:"/config",target:"_blank",rel:"noopener noreferrer"},g=t('<blockquote><ul><li><strong>imposters path</strong>: <code>imposters</code></li><li><strong>host</strong>: <code>localhost</code></li><li><strong>port</strong>: <code>3000</code></li><li><strong>CORS</strong>: <code>[]</code></li><li><strong>proxy</strong>: <code>none</code></li><li><strong>watcher</strong>: <code>false</code></li><li><strong>debugger</strong>: <ul><li><strong>enabled</strong>: <code>false</code></li><li><strong>address</strong>: <code>localhost:3030</code></li></ul></li></ul></blockquote><h2 id="command-line-interface" tabindex="-1"><a class="header-anchor" href="#command-line-interface" aria-hidden="true">#</a> Command-line interface</h2><p>Killgrave is almost fully configurable through the command line, except for CORS, which can only be configured using the config file.</p>',3),u={href:"/cli",target:"_blank",rel:"noopener noreferrer"},f=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ killgrave <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="configuration-file" tabindex="-1"><a class="header-anchor" href="#configuration-file" aria-hidden="true">#</a> Configuration file</h2><p>In case you are looking for a predictable and reproducible configuration, you can use the <code>-config</code> command-line flag to specify the location of a configuration file, which can be written either in JSON or YAML.</p>`,3),p={href:"/config",target:"_blank",rel:"noopener noreferrer"},m=t("<p>As you can see, you can configure all the options in a very easy way.</p><blockquote><p>Historically, the options <code>imposters_path</code>, <code>port</code> and <code>host</code> were mandatory when using a configuration file. However, since the last version (<code>v0.4.1</code>), they are no longer needed, so you can simply override those options if you actually want to. Furthermore, in previous versions (prior to <code>v0.4.1</code>), the <code>imposters_path</code> option was used to refer to the path to the working directory where Killgrave was executed from, but since the last version (<code>v0.4.1</code>) this is relative to the location of the config file.</p></blockquote>",2);function v(b,_){const n=r("ExternalLinkIcon");return l(),s("div",null,[d,o("p",null,[e("While you are welcome to provide your own configuration, Killgrave will default to the following "),o("a",h,[e("configuration"),a(n)]),e(":")]),g,o("p",null,[e("You can find the list with all the available flags at "),o("a",u,[e("CLI"),a(n)]),e(" section or by running:")]),f,o("p",null,[e("You can find the list with all the available settings at "),o("a",p,[e("Config Reference"),a(n)]),e(" section.")]),m])}const w=i(c,[["render",v],["__file","getting-started.html.vue"]]);export{w as default};
