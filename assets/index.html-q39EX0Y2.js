import{_ as i,o as r,c as o,a as e,b as s,e as t}from"./app-lnPknyyT.js";const l={},n=e("h1",{id:"killgrave",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#killgrave","aria-hidden":"true"},"#"),s(" Killgrave")],-1),c=["src"],d=t("<p><strong>Killgrave</strong> is a tool that provides a simple way to create a powerful simulator for HTTP-based APIs.</p><p>The Killgrave&#39;s philosophy is to provide an easy way to configure your mock server, ensuring that you don&#39;t need to learn another tooling language. For that reason we use JSON and YAML to generate all necessary configurations.</p><p>Some Killgrave features are:</p><ul><li>An easy way to create imposters files, either using JSON or YAML.</li><li>The possibility to validate requests against JSON schemas.</li><li>Use of regular expressions to allow different parameters in headers and urls.</li><li>Custom and dynamic response bodies, of all content types (application/json, text/html...).</li><li>Custom response headers and cross-origin resource sharing (CORS).</li><li>Simulate network issues and server high loads with configurable, dynamic responses delay.</li><li>Use of configurable proxy server to call to the original server.</li><li>Use either command-line interface flags or a configuration file (JSON/YAML).</li><li>Hot configuration reloads based on a configurable file watcher.</li><li>Expose the mocker server through HTTP over TLS (SSL).</li><li>Use of an interactive mode to debug your mock server with a web app.</li></ul>",4);function h(a,u){return r(),o("div",null,[n,e("img",{src:a.$withBase("/img/killgrave.png"),alt:"killgrave",style:{"max-width":"130px"}},null,8,c),d])}const p=i(l,[["render",h],["__file","index.html.vue"]]);export{p as default};
